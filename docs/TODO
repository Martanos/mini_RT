TODO:
4. Material Property Gathering
   - Get base material color
   - Get texture coordinates at intersection point
   - Apply checkerboard pattern if specified
   - Sample bump/normal maps if present
   NOTES: SOLID CHECKERBOARD PATTERN AND TEXTURES ARE MUTUALLY EXCLUSIVE

5. Normal Calculation
   - Get geometric normal at intersection point
   - If bump map exists, perturb normal using height differences
   - If normal map exists, transform sampled normal to world space
   - Normalize final normal vector

6. Lighting Calculation (Phong Model)
   - For each light source:
     - Calculate light direction vector
     - Check for shadows (cast shadow ray)
     - Calculate diffuse component (Lambert's law)
     - Calculate specular component (Phong reflection)
     - Apply light attenuation based on distance
     - Accumulate light contributions

7. Specular Reflection
   - Calculate reflection direction using incident ray and surface normal
   - Cast reflection ray recursively (with depth limit)
   - Blend reflection color with local color based on material reflectivity

8. Texture Application
   - Map 3D intersection point to 2D texture coordinates
   - For checkerboard:
     - Scale and offset coordinates
     - Determine pattern color based on position
   - For image textures:
     - Sample texture at mapped coordinates
     - Apply texture filtering if needed

9. Final Color Composition
   - Combine all lighting components
   - Apply global illumination effects
   - Clamp final color values
   - Write to output buffer

Static values -> Ray -> Intersection -> Lighting -> Final Color -> Put pixel

PERPETUAL TODO:
- Debugging
- Documentation
- Error handling
- Refactoring
- Optimization
- Code cleanup
